CREATE OR ALTER PROCEDURE DBO.SPQ_CEM_API @JSON NVARCHAR(MAX)
	WITH ENCRYPTION
AS
SET DATEFORMAT dmy
DECLARE @TBLERRORES TABLE (ERROR VARCHAR(MAX))
DECLARE  @PARAMETROS NVARCHAR(MAX)			,@MODELO VARCHAR(100)			   ,@METODO VARCHAR(100)
		,@USUARIO VARCHAR(12)				   ,@COMPANIA VARCHAR(2)		      ,@IDSEDE      VARCHAR(5)		
      ,@SYS_COMPUTERNAME VARCHAR(200)     ,@DATOS    VARCHAR(MAX)
      ,@FECHA DATETIME                    ,@AGENDA   VARCHAR(MAX)          ,@RESPUESTA VARCHAR(20)
      ,@CONSECUTIVO VARCHAR(20)
BEGIN
	SELECT *
	INTO #JSON
	FROM OPENJSON(@json) WITH (
			MODELO VARCHAR(100) '$.MODELO'
			,METODO VARCHAR(100) '$.METODO'
			,USUARIO VARCHAR(12) '$.USUARIO'
			,PARAMETROS NVARCHAR(MAX) AS JSON
	)

	SELECT   @MODELO = MODELO			,@METODO = METODO
			,@PARAMETROS = PARAMETROS	,@USUARIO = USUARIO
	FROM #JSON

IF @METODO='CONSULTA_AGENDA'     
BEGIN         
   SELECT @FECHA=CONVERT(DATE,FECHA)       
   FROM   OPENJSON (@PARAMETROS)
   WITH (           
   FECHA  VARCHAR(20)   '$.FECHA' 
   )
   IF @FECHA<=DBO.FNK_GETDATE()
   BEGIN
      SELECT 'KO'OK,'No se puede consultar una agenda anterior o del mismo dia'
      RETURN
   END
   SELECT 'OK'OK
    
     SELECT DATOS=( SELECT CIT.CONSECUTIVO,DBO.FNK_FECHA_GRINGA(FECHA)FECHA,LEFT(CONVERT(VARCHAR,FECHA,108),5)HORA,MES.DESCRIPCION AS ESPECIALIDAD,
      MED.NOMBRE AS NOMBRE_MED,SED.DESCRIPCION AS SEDE,COALESCE(CIT.VALORCOPAGO,0)VLRCOPAGO,
      CASE WHEN COALESCE(CIT.VALORCOPAGO,0)>0 AND COALESCE(CIT.IDKPAGE,0)>0 AND TIPOCAJA='TFCJ' THEN KPAGE.LINKPAGO ELSE NULL END LINK_PAGO
      FROM CIT INNER JOIN MED ON CIT.IDMEDICO=MED.IDMEDICO
            INNER JOIN MES ON COALESCE(CIT.IDEMEDICA,MED.IDEMEDICA)=MES.IDEMEDICA 
            INNER JOIN AFI ON CIT.IDAFILIADO=AFI.IDAFILIADO
            INNER JOIN SED ON CIT.IDSEDE=SED.IDSEDE
            LEFT  JOIN KPAGE ON CIT.IDKPAGE=KPAGE.IDKPAGE
      WHERE CONVERT(DATE,FECHA)=@FECHA
      AND CIT.IDAFILIADO IS NOT NULL
      AND COALESCE(CIT.CONFIRMADA,0)=0
      ORDER BY CIT.IDMEDICO,CIT.FECHA ASC
      FOR JSON PATH  )
     RETURN             
   END  
   IF @METODO='RESPUESTA_CIT'     
   BEGIN                   
      SELECT @CONSECUTIVO=CONSECUTIVO,@RESPUESTA=RESPUESTA
      FROM   OPENJSON (@PARAMETROS)
      WITH (           
      CONSECUTIVO  VARCHAR(20)   '$.CONSECUTIVO',
      RESPUESTA  VARCHAR(20)   '$.RESPUESTA'
      )   
      IF COALESCE(@CONSECUTIVO,'')<>'' AND EXISTS(SELECT * FROM CIT WHERE CONSECUTIVO=@CONSECUTIVO AND FECHA>DBO.FNK_GETDATE())
      BEGIN
         IF @RESPUESTA='CONFIRMAR'
         BEGIN
            BEGIN TRY           
                 UPDATE CIT SET CONFIRMADA=1,FECHACONFIRMA=DBO.FNK_GETDATE(),USUCONFIRMA='INTER_CIT' WHERE CONSECUTIVO=@CONSECUTIVO               
            END TRY
            BEGIN CATCH
                    INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE()
            END CATCH
         END
         ELSE
         BEGIN
            IF @RESPUESTA='CANCELAR'
            BEGIN
               SELECT @DATOS='{"MODELO":"CIT_COL_3","METODO":"CANCELAR_CITA","PARAMETROS":{"CONSECUTIVO":"'+@CONSECUTIVO+'","IDCAUSAL":"CAN01"},"USUARIO":"INTER_CIT"}'
               BEGIN TRY           
                     EXEC SPQ_JSON @DATOS
               END TRY
               BEGIN CATCH
                        INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE()
               END CATCH
            END
            ELSE
            BEGIN
               INSERT INTO @TBLERRORES(ERROR) SELECT 'Metodo no Valido CONFIRMAR | CANCELAR '
            END
         END
      END
      ELSE
      BEGIN
         IF COALESCE(@CONSECUTIVO,'')='' OR NOT EXISTS(SELECT * FROM CIT WHERE CONSECUTIVO=@CONSECUTIVO)
         BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'Consecutivo de Cita no Encontrado. no se puede continuar'
         END
         IF EXISTS(SELECT * FROM CIT WHERE CONSECUTIVO=@CONSECUTIVO AND FECHA<DBO.FNK_GETDATE())
         BEGIN
            INSERT INTO @TBLERRORES(ERROR)
            SELECT 'La Fecha de la Cita es menor a la Actual, no se puede continuar'
         END
      END
      IF(SELECT COUNT(*) FROM @TBLERRORES)>0
      BEGIN
         SELECT 'KO' OK, ERROR FROM @TBLERRORES
         RETURN
      END
      SELECT 'OK' OK
      RETURN 
   END  
END